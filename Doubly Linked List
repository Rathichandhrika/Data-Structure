class Node {
    int data;
    Node prev, next;

    Node(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList {
    Node head;

    void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        if (head != null) {
            newNode.next = head;
            head.prev = newNode;
        }
        head = newNode;
    }

    void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
        newNode.prev = current;
    }

    void insertAtPosition(int data, int position) {
        if (position < 1) {
            System.out.println("Invalid position!");
            return;
        }
        if (position == 1) {
            insertAtBeginning(data);
            return;
        }

        Node newNode = new Node(data);
        Node current = head;

        for (int i = 1; i < position - 1 && current != null; i++) {
            current = current.next;
        }

        if (current == null) {
            System.out.println("Position out of range!");
            return;
        }

        newNode.next = current.next;
        if (current.next != null) {
            current.next.prev = newNode;
        }
        current.next = newNode;
        newNode.prev = current;
    }

    void delete(int key) {
        Node current = head;

        while (current != null && current.data != key) {
            current = current.next;
        }

        if (current == null) {
            System.out.println("Element not found!");
            return;
        }

        if (current.prev != null) {
            current.prev.next = current.next;
        } else {
            head = current.next; // deleting head
        }

        if (current.next != null) {
            current.next.prev = current.prev;
        }
    }

    void displayForward() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " <-> ");
            if (current.next == null) break; // stop at last node for backward display
            current = current.next;
        }
        System.out.println("NULL");
    }

    void displayBackward() {
        Node current = head;
        if (current == null) {
            System.out.println("List is empty");
            return;
        }

        while (current.next != null) {
            current = current.next;
        }

        while (current != null) {
            System.out.print(current.data + " <-> ");
            current = current.prev;
        }
        System.out.println("NULL");
    }

    public static void main(String[] args) {
        DoublyLinkedList dll = new DoublyLinkedList();

        dll.insertAtEnd(10);
        dll.insertAtEnd(20);
        dll.insertAtEnd(30);
        System.out.println("After inserting at end:");
        dll.displayForward();   

        dll.insertAtBeginning(5);
        System.out.println("After inserting at beginning:");
        dll.displayForward();  

        dll.insertAtPosition(15, 3);
        System.out.println("After inserting 15 at position 3:");
        dll.displayForward();  

        dll.delete(20);
        System.out.println("After deleting 20:");
        dll.displayForward();  

        System.out.println("Backward traversal:");
        dll.displayBackward();  
    }
}
